package com.donateBooks.controller;

import java.io.File;
import java.io.IOException;
import java.sql.SQLException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;

import com.donateBooks.model.BookHobby;
import com.donateBooks.model.BookType;
import com.donateBooks.model.Books;
import com.donateBooks.model.DonateBook;
import com.donateBooks.model.GiveBook;
import com.donateBooks.model.Page;
import com.donateBooks.model.UserHobby;
import com.donateBooks.model.Users;
import com.donateBooks.service.BooksService;
import com.donateBooks.service.UserHobbyService;
import com.donateBooks.util.donateBookUtils;

;

@Controller
@RequestMapping("books")
public class BooksController {

	@Resource
	private BooksService booksService;
	@Resource
	private UserHobbyService userHobbyService;

	@RequestMapping(value = "/selMyHistory", method = RequestMethod.GET)
	@ResponseBody
	public Page selMyHistory(String currentPage, HttpServletRequest request,
			HttpServletResponse response) throws IOException, SQLException {
		HttpSession session = request.getSession();
		Users users = (Users) session.getAttribute("users");
		if(null == currentPage || currentPage.length()<=0){
			currentPage = "1";
		}
		int pageIndex = Integer.valueOf(currentPage);
		int count = booksService.selMyHistoryCount(String.valueOf(users.getId()));
		int pageSize = donateBookUtils.pageSize;
		List<Books> books = booksService.selMyHistory(String.valueOf(users.getId()),currentPage, String.valueOf(pageSize));
		int totalPages= (count+ pageSize-1) / pageSize;
		Page page = new Page(count, totalPages, pageIndex, books);
		return page;
	}
	
	@RequestMapping(value = "/postBook")
	@ResponseBody
	public void postBook(String id,String doId,String postCompany,String postNum){
		booksService.updBooksStatus(id, "2");
		DonateBook donateBook = new DonateBook();
		donateBook.setId(Integer.parseInt(doId));
		donateBook.setPostCompany(postCompany);
		donateBook.setPostNum(postNum);
		booksService.postBooks(donateBook);
	}
	@RequestMapping(value = "/getBook")
	@ResponseBody
	public void getBook(String id){
		booksService.updBooksStatus(id, "6");
	}
	@RequestMapping(value = "/selBookById")
	@ResponseBody
	public Books selBookById(String id){
		return booksService.selBookById(id);
	}
	@RequestMapping(value = "/postGiveBook")
	@ResponseBody
	public void postGiveBook(String id,String giId,String postCompany,String postNum,HttpServletRequest request,
			HttpServletResponse response){
		booksService.updBooksStatus(id, "5");
		HttpSession session = request.getSession();
		Users users = (Users) session.getAttribute("users");
		GiveBook giveBook = new GiveBook();
		giveBook.setId(Integer.parseInt(giId));
		giveBook.setPostCompany(postCompany);
		giveBook.setPostNum(postNum);
		giveBook.setAuditId(String.valueOf(users.getId()));
		giveBook.setAuditName(users.getUserName());
		giveBook.setAuditTime(donateBookUtils.detailTime());
		booksService.postGiveBooks(giveBook);
	}
	@RequestMapping(value = "/selAllMyDonate", method = RequestMethod.GET)
	@ResponseBody
	public List<Books> selAllMyDonate(HttpServletRequest request,
			HttpServletResponse response){
//		return dictService.selDictByType(dictType);
		HttpSession session = request.getSession();
		Users users = (Users) session.getAttribute("users");
		return booksService.selMyDonateBook(String.valueOf(users.getId()));
	}
	
	@RequestMapping(value = "/selAllAuditDonate", method = RequestMethod.GET)
	@ResponseBody
	public List<Books> selAllAuditDonate(HttpServletRequest request,
			HttpServletResponse response){
		return booksService.selAllAuditDonate();
	}
	
	@RequestMapping(value = "/selAllGive", method = RequestMethod.GET)
	@ResponseBody
	public List<Books> selAllGive(HttpServletRequest request,
			HttpServletResponse response){
		return booksService.selAllGive();
	}
	
	@RequestMapping(value = "/auditDonateBook")
	@ResponseBody
	public void auditDonateBook(String id,String doId,HttpServletRequest request,
			HttpServletResponse response){
		HttpSession session = request.getSession();
		Users users = (Users) session.getAttribute("users");
		DonateBook donateBook = new DonateBook();
		donateBook.setAuditId(String.valueOf(users.getId()));
		donateBook.setAuditName(users.getUserName());
		donateBook.setAuditTime(donateBookUtils.detailTime());
		donateBook.setId(Integer.parseInt(doId));
		booksService.updBooksStatus(id, "3");
		booksService.updDonateBooks(donateBook);
	}
	
	@RequestMapping("/DonateBooks")
	public String DonateBooks(String bookName, String author,
			String bookNameEng, String translators, String publisher,
			String ISBN, @RequestParam("bookImg") MultipartFile files,
			String[] bookType, String bookBrief, String oldDegree,
			String[] userHobby, HttpServletRequest request,
			HttpServletResponse response) throws IllegalStateException,
			IOException {

		// 获取文件存储路径（绝对路径）
		String path = request.getServletContext().getRealPath("/dist/images");
		// 获取原文件名
		String fileName = files.getOriginalFilename();
		// 创建文件实例
		String realPath = (UUID.randomUUID().toString().replace("-", "") + fileName);
		File filePath = new File(path, realPath);
		// 如果文件目录不存在，创建目录
		if (!filePath.getParentFile().exists()) {
			filePath.getParentFile().mkdirs();
			System.out.println("创建目录" + filePath);
		}
		// 写入文件
		files.transferTo(filePath);
		Books books = new Books();
		books.setAuthor(author);
		books.setBookBrief(bookBrief);
		books.setBookId(UUID.randomUUID().toString());
		books.setBookImg(realPath);
		books.setBookName(bookName);
		books.setBookNameEng(bookNameEng);
		books.setBookStatus("1");
		books.setBookType(bookType);
		books.setISBN(ISBN);
		books.setOldDegree(Integer.parseInt(oldDegree));
		books.setPublisher(publisher);
		books.setTranslators(translators);
		booksService.insBooks(books);
		BookHobby bookHobby = new BookHobby();
		bookHobby.setBookId(books.getId());
		BookType type = new BookType();
		type.setBookId(books.getId());
		for (String tmp : bookType) {
			type.setBookTypeId(Integer.parseInt(tmp));
			booksService.insBookType(type);
		}
		for (String tmp : userHobby) {
			bookHobby.setHobbyId(Integer.parseInt(tmp));
			booksService.insBookHobby(bookHobby);
		}
		HttpSession session = request.getSession();
		Users users = (Users) session.getAttribute("users");
		DonateBook donateBook = new DonateBook();
		donateBook.setBookId(String.valueOf(books.getId()));
		donateBook.setDonateId(String.valueOf(users.getId()));
		donateBook.setDonateName(users.getUserName());
		donateBook.setDonateTime(donateBookUtils.detailTime());
		booksService.insDonateBooks(donateBook);
		return "mydonatebookmanage";
	}
	
	@RequestMapping("/delDonateBook")
	@ResponseBody
	public void delDonateBook(String id){
		BookHobby bookHobby = new BookHobby();
		bookHobby.setBookId(Integer.parseInt(id));
		BookType bookType = new BookType();
		bookType.setBookId(Integer.parseInt(id));
		booksService.delBookHobby(bookHobby);
		booksService.delBooks(id);
		booksService.delBookType(bookType);
		booksService.delDonateBooks(id);
	}
	@RequestMapping("/selAllMyRecommend")
	@ResponseBody
	public Page selAllMyRecommend(String currentPage,HttpServletRequest request,
			HttpServletResponse response){
//		dictService.updDict(id, dictName);
		if(null == currentPage || currentPage.length()<=0){
			currentPage = "1";
		}
		int pageIndex = Integer.valueOf(currentPage);
		HttpSession session = request.getSession();
		Users users = (Users) session.getAttribute("users");
		List<UserHobby> tmp = userHobbyService.selUserHobby(String.valueOf(users.getId()));
		String []userHobby = new String[tmp.size()];
		for(int i = 0; i < tmp.size();i++){
			userHobby[i] = String.valueOf(tmp.get(i).getDictId());
		}
		int count = booksService.recommendBooksCount(userHobby);
		int pageSize = 4;
		List<Books> books = booksService.recommendBooks(userHobby, currentPage, String.valueOf(pageSize));
		int totalPages= (count+ pageSize-1) / pageSize;
		Page page = new Page(count, totalPages, pageIndex, books);
		return page;
	}
	@RequestMapping("/booksBorrow")
	@ResponseBody
	public synchronized Map<String,String> booksBorrow(String id,HttpServletRequest request,
			HttpServletResponse response){
//		dictService.updDict(id, dictName);
		HttpSession session = request.getSession();
		Users users = (Users) session.getAttribute("users");
		Map <String,String> map = new HashMap<String, String>();
		int count = booksService.selBorrowBookCount(String.valueOf(users.getId()));
		if(count>0)
		{
			map.put("result", "fail");
			map.put("msg", "借阅失败！当前已借阅过书籍，完成后才可继续借阅");
			return map;
		}
		Books books = booksService.selBookById(id);
		if(!books.getBookStatus().equals("3")){
			map.put("result", "fail");
			map.put("msg", "借阅失败！手慢了，当前书籍已被其他人借走啦！");
			return map;
		}
		GiveBook giveBook = new GiveBook();
		giveBook.setBookId(books.getId());
		giveBook.setGiveId(users.getId());
		giveBook.setGiveName(users.getUserName());
		giveBook.setGiveTime(donateBookUtils.detailTime());
		booksService.insGiveBook(giveBook);
		booksService.updBooksStatus(id, "4");
		map.put("result", "success");
		map.put("msg", "借书成功");
		return map;
		
	}
	
	
	@RequestMapping("/donateBooks")
	public String donateBooks(HttpServletRequest request,
			HttpServletResponse response) throws IOException, SQLException {
		return "donateBooks";
	}
	@RequestMapping("/bookhobbymanage")
	public String bookhobbymanage(HttpServletRequest request,
			HttpServletResponse response) throws IOException, SQLException {
		return "bookhobbymanage";
	}
	@RequestMapping("/addbooktype")
	public String addbooktype(HttpServletRequest request,
			HttpServletResponse response) throws IOException, SQLException {
		return "addbooktype";
	}
	@RequestMapping("/addbookhobby")
	public String addbookhobby(HttpServletRequest request,
			HttpServletResponse response) throws IOException, SQLException {
		return "addbookhobby";
	}
	@RequestMapping("/mydonatebookmanage")
	public String donatebookmanage(HttpServletRequest request,
			HttpServletResponse response) throws IOException, SQLException {
		return "mydonatebookmanage";
	}
	@RequestMapping("/postbook")
	public String postbook(HttpServletRequest request,
			HttpServletResponse response) throws IOException, SQLException {
		return "postbook";
	}
	@RequestMapping("/admindonatemanage")
	public String admindonatemanage(HttpServletRequest request,
			HttpServletResponse response) throws IOException, SQLException {
		return "admindonatemanage";
	}
	@RequestMapping("/bookrecommend")
	public String bookrecommend(HttpServletRequest request,
			HttpServletResponse response) throws IOException, SQLException {
		return "bookrecommend";
	}
	@RequestMapping("/bookDetail")
	public String bookDetail(HttpServletRequest request,
			HttpServletResponse response) throws IOException, SQLException {
		return "bookDetail";
	}
	@RequestMapping("/givebookmanage")
	public String givebookmanage(HttpServletRequest request,
			HttpServletResponse response) throws IOException, SQLException {
		return "givebookmanage";
	}
	@RequestMapping("/postgivebook")
	public String postgivebook(HttpServletRequest request,
			HttpServletResponse response) throws IOException, SQLException {
		return "postgivebook";
	}
	@RequestMapping("/borrowbookhis")
	public String borrowbookhis(HttpServletRequest request,
			HttpServletResponse response) throws IOException, SQLException {
		return "borrowbookhis";
	}
	

}
